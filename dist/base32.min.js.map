{"version":3,"sources":["webpack://base32/webpack/bootstrap","webpack://base32/./base32.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","charmap","alphabet","mappings","split","forEach","rfc4648","0","1","crockford","O","I","L","base32hex","Decoder","options","this","buf","shift","carry","type","Error","Encoder","lc","toLowerCase","write","str","char","toUpperCase","symbol","push","finalize","length","byte","encode","decode"],"mappings":"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","file":"base32.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\"use strict\";\n\n/**\n * Generate a character map.\n * @param {string} alphabet e.g. \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\"\n * @param {CharacterMap} mappings map overrides from key to value\n * @method\n * @returns {CharacterMap} key value map\n */\nfunction charmap(alphabet, mappings) {\n  mappings || (mappings = {});\n  alphabet.split(\"\").forEach(function (c, i) {\n    if (!(c in mappings)) mappings[c] = i;\n  });\n  return mappings;\n}\n\n/**\n * The RFC 4648 base 32 alphabet and character map.\n * @see {@link https://tools.ietf.org/html/rfc4648}\n * @type {Base32Variant}\n */\nconst rfc4648 = {\n  alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n  charmap: {\n    0: 14,\n    1: 8\n  }\n};\nrfc4648.charmap = charmap(rfc4648.alphabet, rfc4648.charmap);\n\n/**\n * The Crockford base 32 alphabet and character map.\n * @see {@link http://www.crockford.com/wrmg/base32.html}\n * @type {Base32Variant}\n */\nconst crockford = {\n  alphabet: \"0123456789ABCDEFGHJKMNPQRSTVWXYZ\",\n  charmap: {\n    O: 0,\n    I: 1,\n    L: 1\n  }\n};\ncrockford.charmap = charmap(crockford.alphabet, crockford.charmap);\n\n/**\n * base32hex\n * @see {@link https://en.wikipedia.org/wiki/Base32#base32hex}\n * @type {Base32Variant}\n */\nconst base32hex = {\n  alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n  charmap: {}\n};\nbase32hex.charmap = charmap(base32hex.alphabet, base32hex.charmap);\n\n/**\n * Create a new `Decoder` with the given options.\n *\n * @param {DecoderOptions} [options]\n *   @param {string} [options.type] Supported Base-32 variants are:\n *     \"rfc4648\", \"base32hex\", and \"crockford\".\n *   @param {CharacterMap} [options.charmap] Override the character map used in decoding.\n * @constructor\n */\nfunction Decoder (options) {\n  /** @type ByteArray */\n  this.buf = [];\n  this.shift = 8;\n  this.carry = 0;\n\n  if (options) {\n\n    switch (options.type) {\n      case \"rfc4648\":\n        this.charmap = exports.rfc4648.charmap;\n        break;\n      case \"crockford\":\n        this.charmap = exports.crockford.charmap;\n        break;\n      case \"base32hex\":\n        this.charmap = exports.base32hex.charmap;\n        break;\n      default:\n        throw new Error(\"invalid type\");\n    }\n\n    if (options.charmap) this.charmap = options.charmap;\n  }\n}\n\n/**\n * The default character map corresponds to RFC4648.\n */\nDecoder.prototype.charmap = rfc4648.charmap;\n\n/**\n * Decode a string, continuing from the previous state.\n *\n * @param {string} str\n * @return {Decoder} this\n */\nDecoder.prototype.write = function (str) {\n  const charmap = this.charmap;\n  const buf = this.buf;\n  let shift = this.shift;\n  let carry = this.carry;\n\n  // decode string\n  for (const char of str.toUpperCase().split(\"\")) {\n    // ignore padding\n    if (char == \"=\") continue;\n\n    // lookup symbol\n    const symbol = charmap[char] & 0xff;\n\n    // 1: 00000 000\n    // 2:          00 00000 0\n    // 3:                    0000 0000\n    // 4:                             0 00000 00\n    // 5:                                       000 00000\n    // 6:                                                00000 000\n    // 7:                                                         00 00000 0\n\n    shift -= 5;\n    if (shift > 0) {\n      carry |= symbol << shift;\n    } else if (shift < 0) {\n      buf.push(carry | (symbol >> -shift));\n      shift += 8;\n      carry = (symbol << shift) & 0xff;\n    } else {\n      buf.push(carry | symbol);\n      shift = 8;\n      carry = 0;\n    }\n  }\n\n  // save state\n  this.shift = shift;\n  this.carry = carry;\n\n  // for chaining\n  return this;\n};\n\n/**\n * Finish decoding.\n *\n * @param {string} [str] The final string to decode.\n * @return {ByteArray} Decoded byte array.\n */\nDecoder.prototype.finalize = function (str) {\n  if (str) {\n    this.write(str);\n  }\n  if (this.shift !== 8 && this.carry !== 0) {\n    this.buf.push(this.carry);\n    this.shift = 8;\n    this.carry = 0;\n  }\n  return this.buf;\n};\n\n/**\n * Create a new `Encoder` with the given options.\n *\n * @param {EncoderOptions} [options]\n *   @param {string} [options.type] Supported Base-32 variants are:\n *     \"rfc4648\", \"base32hex\", and \"crockford\".\n *   @param {string} [options.alphabet] Override the alphabet used in encoding.\n *   @param {boolean} [options.lc] Use lower-case alphabet.\n * @constructor\n */\nfunction Encoder (options) {\n  this.buf = \"\";\n  this.shift = 3;\n  this.carry = 0;\n\n  if (options) {\n\n    switch (options.type) {\n      case \"rfc4648\":\n        this.alphabet = exports.rfc4648.alphabet;\n        break;\n      case \"crockford\":\n        this.alphabet = exports.crockford.alphabet;\n        break;\n      case \"base32hex\":\n        this.alphabet = exports.base32hex.alphabet;\n        break;\n      default:\n        throw new Error(\"invalid type\");\n    }\n\n    if (options.alphabet) this.alphabet = options.alphabet;\n    else if (options.lc) this.alphabet = this.alphabet.toLowerCase();\n  }\n}\n\n/**\n * The default alphabet corresponds to RFC4648.\n * @type string\n */\nEncoder.prototype.alphabet = rfc4648.alphabet;\n\n/**\n * Encode a byte array, continuing from the previous state.\n *\n * @param {ByteArray} buf The byte array to encode.\n * @return {Encoder} this\n */\n\nEncoder.prototype.write = function (buf) {\n  let shift = this.shift;\n  let carry = this.carry;\n  let symbol;\n\n  // encode each byte in buf\n  for (let i = 0; i < buf.length; i++) {\n    const byte = buf[i];\n\n    // 1: 00000 000\n    // 2:          00 00000 0\n    // 3:                    0000 0000\n    // 4:                             0 00000 00\n    // 5:                                       000 00000\n    // 6:                                                00000 000\n    // 7:                                                         00 00000 0\n\n    symbol = carry | (byte >> shift);\n    this.buf += this.alphabet[symbol & 0x1f];\n\n    if (shift > 5) {\n      shift -= 5;\n      symbol = byte >> shift;\n      this.buf += this.alphabet[symbol & 0x1f];\n    }\n\n    shift = 5 - shift;\n    carry = byte << shift;\n    shift = 8 - shift;\n  }\n\n  // save state\n  this.shift = shift;\n  this.carry = carry;\n\n  // for chaining\n  return this;\n};\n\n/**\n * Finish encoding.\n *\n * @param {ByteArray} [buf] The final byte array to encode.\n * @return {string} The encoded byte array.\n */\nEncoder.prototype.finalize = function (buf) {\n  if (buf) {\n    this.write(buf);\n  }\n  if (this.shift !== 3) {\n    this.buf += this.alphabet[this.carry & 0x1f];\n    this.shift = 3;\n    this.carry = 0;\n  }\n  return this.buf;\n};\n\n/**\n * Convenience encoder.\n *\n * @param {ByteArray} buf The byte array to encode.\n * @param {DecoderOptions} [options] Options to pass to the encoder.\n * @return {string} The encoded string.\n */\nexports.encode = function (buf, options) {\n  return new Encoder(options).finalize(buf);\n};\n\n/**\n * Convenience decoder.\n *\n * @param {string} str The string to decode.\n * @param {DecoderOptions} [options] Options to pass to the decoder.\n * @return {ByteArray} The decoded byte array.\n */\nexports.decode = function (str, options) {\n  return new Decoder(options).finalize(str);\n};\n\n// Exports.\nexports.Decoder = Decoder;\nexports.Encoder = Encoder;\nexports.charmap = charmap;\nexports.crockford = crockford;\nexports.rfc4648 = rfc4648;\nexports.base32hex = base32hex;\n"],"sourceRoot":""}